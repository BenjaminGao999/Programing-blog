
作者：404P
链接：https://juejin.im/post/5d4f8bb3518825237b5bde9c
来源：掘金
著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。

幂等指的是相同请求（identical request）执行一次或者多次所带来的副作用（side-effects）是一样的。

什么是相同的请求？哪些情况会有副作用？该如何避免副作用？且看三部曲。


不少关于幂等的文章都称自己的方案是通用解决方案，但笔者却认为，
不同的业务场景下，相同请求和副作用都是有差异性的，不同的副作用需要不同的方案来解决，
不存在完全通用的解决方案。而三部曲旨在提炼出一种思考模式，并举例说明，在该思考模式下，更容易设计出符合业务场景的幂等解决方案。



我来列举几个场景
提交创建
提交更新
提交删除

1）在当前页面重复提交；
client      server 
提交    ->     保存成功
      x <-     返回
响应超时
重试

提交    ->     保存成功
        <-     返回
成功
重试



提交    ->    保存失败
      x <-     返回
响应超时
重试

提交    ->    保存失败
        <-     返回
重试



reqNo+source 

client      server 
 getReqNo -> generate reqNo
 
 reqNo   <-  响应
 
 reqNo+source    ->  remove req true 
 
reqNo+source       -> remove req false 
                  <-  提示“重复提交”


在业务中做双重检测
根据user_id查找记录， 如果已存在则修改，否则创建。
step1 查找
step2 插入或修改

拆分成两步如何解决并发问题？



 
2）在当前页面提交， 退出当前页面，再次进入当前页面，会获取已经提交的数据，  再次提交（修改/重试）；
client      server 
提交    ->     保存成功
      x <-     返回
响应超时

获取当前页面数据  -> 获取成功
     展示数据     <- 响应
     
获取当前页面数据  -> 执行失败
     请求重试     <- 响应
     
获取当前页面数据  -> 执行成功
                x<- 响应
 请求超时，请求重试
 
遇到第2）情况， 只能是2种方式， 提交修改/重试

3） 用户自己调用了api,重复提交创建/修改

     
     
     
